{"version":3,"sources":["assets/twitter-logo.svg","constants.js","Components/LoadingIndicator/index.js","Components/SelectCharacter/index.js","Components/Arena/index.js","App.js","index.js"],"names":["CONTRACT_ADDRESS","transformCharacterData","characterData","name","imageURI","hp","toNumber","maxHp","attackDamage","LoadingIndicator","className","SelectCharacter","setCharacterNFT","useState","characters","setCharacters","gameContract","setGameContract","mintingCharacter","setMintingCharacter","useEffect","ethereum","window","signer","ethers","providers","Web3Provider","getSigner","Contract","myEpicGame","abi","console","log","getCharacters","a","getAllDefaultCharacters","charactersTxn","map","error","onCharacterMint","sender","tokenId","characterIndex","checkIfUserHasNFT","characterNFT","on","off","length","character","index","src","alt","type","onClick","characterId","mintCharacterNFT","mintTxn","wait","warn","Arena","boss","setBoss","attackState","setAttackState","showToast","setShowToast","runAttackAction","attackBoss","attackTxn","setTimeout","fetchBoss","getBigBoss","bossTxn","onAttackComplete","newBossHp","newPlayerHp","bossHp","playerHp","prevState","id","value","max","TWITTER_HANDLE","TWITTER_LINK","App","currentAccount","setCurrentAccount","isLoading","setIsLoading","checkIfWalletIsConnected","request","method","accounts","account","connectWalletAction","alert","fetchNFTMetadata","provider","txn","twitterLogo","href","target","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.66b77e23.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.ab177c79.svg\";","const CONTRACT_ADDRESS = '0x09c89f6804A00d953b1A78fccc2C5Ea7DCbf629E';\r\n\r\nconst transformCharacterData = (characterData) => {\r\n    return {\r\n        name: characterData.name,\r\n        imageURI: characterData.imageURI,\r\n        hp: characterData.hp.toNumber(),\r\n        maxHp: characterData.maxHp.toNumber(),\r\n        attackDamage: characterData.attackDamage.toNumber(),\r\n    };\r\n};\r\n\r\nexport { CONTRACT_ADDRESS, transformCharacterData };","import React from 'react';\r\nimport './LoadingIndicator.css';\r\n\r\nconst LoadingIndicator = () => {\r\n\r\n  return (\r\n    <div className=\"lds-ring\">\r\n      <div></div>\r\n      <div></div>\r\n      <div></div>\r\n      <div></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoadingIndicator;\r\n","import React, { useEffect, useState } from 'react';\r\nimport './SelectCharacter.css';\r\nimport { ethers } from 'ethers';\r\nimport { CONTRACT_ADDRESS, transformCharacterData } from '../../constants';\r\nimport myEpicGame from '../../utils/MyEpicGame.json';\r\nimport LoadingIndicator from '../LoadingIndicator';\r\n\r\n/*\r\n * Don't worry about setCharacterNFT just yet, we will talk about it soon!\r\n */\r\nconst SelectCharacter = ({ setCharacterNFT }) => {\r\n    const [characters, setCharacters] = useState([]);\r\n    const [gameContract, setGameContract] = useState(null);\r\n\r\n    const [mintingCharacter, setMintingCharacter] = useState(false);\r\n\r\n    const mintCharacterNFTAction = (characterId) => async () => {\r\n        try {\r\n            if (gameContract) {\r\n\r\n                setMintingCharacter(true);\r\n                console.log('Minting character in progress...');\r\n                const mintTxn = await gameContract.mintCharacterNFT(characterId);\r\n                await mintTxn.wait();\r\n                console.log('mintTxn:', mintTxn);\r\n            }\r\n        } catch (error) {\r\n            console.warn('MintCharacterAction Error:', error);\r\n\r\n            setMintingCharacter(false);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        const { ethereum } = window;\r\n\r\n        if (ethereum) {\r\n            const provider = new ethers.providers.Web3Provider(ethereum);\r\n            const signer = provider.getSigner();\r\n            const gameContract = new ethers.Contract(\r\n                CONTRACT_ADDRESS,\r\n                myEpicGame.abi,\r\n                signer\r\n            );\r\n\r\n            /*\r\n             * This is the big difference. Set our gameContract in state.\r\n             */\r\n            setGameContract(gameContract);\r\n        } else {\r\n            console.log('Ethereum object not found');\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const getCharacters = async () => {\r\n            try {\r\n                console.log('Getting contract characters to mint');\r\n\r\n                const charactersTxn = await gameContract.getAllDefaultCharacters();\r\n                console.log('charactersTxn:', charactersTxn);\r\n\r\n                const characters = charactersTxn.map((characterData) =>\r\n                    transformCharacterData(characterData)\r\n                );\r\n\r\n                setCharacters(characters);\r\n            } catch (error) {\r\n                console.error('Something went wrong fetching characters:', error);\r\n            }\r\n        };\r\n\r\n        /*\r\n         * Add a callback method that will fire when this event is received\r\n         */\r\n        const onCharacterMint = async (sender, tokenId, characterIndex) => {\r\n            console.log(\r\n                `CharacterNFTMinted - sender: ${sender} tokenId: ${tokenId.toNumber()} characterIndex: ${characterIndex.toNumber()}`\r\n            );\r\n\r\n            /*\r\n             * Once our character NFT is minted we can fetch the metadata from our contract\r\n             * and set it in state to move onto the Arena\r\n             */\r\n            if (gameContract) {\r\n                const characterNFT = await gameContract.checkIfUserHasNFT();\r\n                console.log('CharacterNFT: ', characterNFT);\r\n                setCharacterNFT(transformCharacterData(characterNFT));\r\n            }\r\n        };\r\n\r\n        if (gameContract) {\r\n            getCharacters();\r\n\r\n            /*\r\n             * Setup NFT Minted Listener\r\n             */\r\n            gameContract.on('CharacterNFTMinted', onCharacterMint);\r\n        }\r\n\r\n        return () => {\r\n            /*\r\n             * When your component unmounts, let;s make sure to clean up this listener\r\n             */\r\n            if (gameContract) {\r\n                gameContract.off('CharacterNFTMinted', onCharacterMint);\r\n            }\r\n        };\r\n    }, [gameContract]);\r\n\r\n    const renderCharacters = () =>\r\n        characters.map((character, index) => (\r\n            <div className=\"character-item\" key={character.name}>\r\n                <div className=\"name-container\">\r\n                    <p>{character.name}</p>\r\n                </div>\r\n                <img src={character.imageURI} alt={character.name} />\r\n                <button\r\n                    type=\"button\"\r\n                    className=\"character-mint-button\"\r\n                    onClick={() => mintCharacterNFTAction(index)}\r\n                >{`Mint ${character.name}`}</button>\r\n            </div>\r\n        ));\r\n\r\n    return (\r\n        <div className=\"select-character-container\">\r\n            <h2>Mint Your Hero. Choose wisely.</h2>\r\n            {characters.length > 0 && (\r\n                <div className=\"character-grid\">{renderCharacters()}</div>\r\n            )}\r\n            {/* Only show our loading state if mintingCharacter is true */}\r\n            {mintingCharacter && (\r\n                <div className=\"loading\">\r\n                    <div className=\"indicator\">\r\n                        <LoadingIndicator />\r\n                        <p>Minting In Progress...</p>\r\n                    </div>\r\n                    <img\r\n                        src=\"https://media2.giphy.com/media/61tYloUgq1eOk/giphy.gif?cid=ecf05e47dg95zbpabxhmhaksvoy8h526f96k4em0ndvx078s&rid=giphy.gif&ct=g\"\r\n                        alt=\"Minting loading indicator\"\r\n                    />\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SelectCharacter;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { ethers } from 'ethers';\r\nimport { CONTRACT_ADDRESS, transformCharacterData } from '../../constants';\r\nimport myEpicGame from '../../utils/MyEpicGame.json';\r\nimport './Arena.css';\r\nimport LoadingIndicator from '../LoadingIndicator';\r\n\r\n/*\r\n * We pass in our characterNFT metadata so we can show a cool card in our UI\r\n */\r\nconst Arena = ({ characterNFT, setCharacterNFT }) => {\r\n    // State\r\n    const [gameContract, setGameContract] = useState(null);\r\n    const [boss, setBoss] = useState(null);\r\n    const [attackState, setAttackState] = useState('');\r\n    const [showToast, setShowToast] = useState(false);\r\n\r\n\r\n\r\n    const runAttackAction = async () => {\r\n        try {\r\n            if (gameContract) {\r\n                setAttackState('attacking');\r\n                console.log('Attacking boss...');\r\n                const attackTxn = await gameContract.attackBoss();\r\n                await attackTxn.wait();\r\n                console.log('attackTxn:', attackTxn);\r\n                setAttackState('hit');\r\n\r\n                setShowToast(true);\r\n                setTimeout(() => {\r\n                    setShowToast(false);\r\n                }, 5000);\r\n            }\r\n        } catch (error) {\r\n            console.error('Error attacking boss:', error);\r\n            setAttackState('');\r\n        }\r\n    };\r\n\r\n    // UseEffects\r\n    useEffect(() => {\r\n        const { ethereum } = window;\r\n\r\n        if (ethereum) {\r\n            const provider = new ethers.providers.Web3Provider(ethereum);\r\n            const signer = provider.getSigner();\r\n            const gameContract = new ethers.Contract(\r\n                CONTRACT_ADDRESS,\r\n                myEpicGame.abi,\r\n                signer\r\n            );\r\n\r\n            setGameContract(gameContract);\r\n        } else {\r\n            console.log('Ethereum object not found');\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const fetchBoss = async () => {\r\n            const bossTxn = await gameContract.getBigBoss();\r\n            console.log('Boss:', bossTxn);\r\n            setBoss(transformCharacterData(bossTxn));\r\n        };\r\n\r\n        const onAttackComplete = (newBossHp, newPlayerHp) => {\r\n            const bossHp = newBossHp.toNumber();\r\n            const playerHp = newPlayerHp.toNumber();\r\n\r\n            console.log(`AttackComplete: Boss Hp: ${bossHp} Player Hp: ${playerHp}`);\r\n\r\n            /*\r\n            * Update both player and boss Hp\r\n            */\r\n            setBoss((prevState) => {\r\n                return { ...prevState, hp: bossHp };\r\n            });\r\n\r\n            setCharacterNFT((prevState) => {\r\n                return { ...prevState, hp: playerHp };\r\n            });\r\n        };\r\n\r\n        if (gameContract) {\r\n            /*\r\n             * gameContract is ready to go! Let's fetch our boss\r\n             */\r\n            fetchBoss();\r\n            gameContract.on('AttackComplete', onAttackComplete);\r\n        }\r\n\r\n        return () => {\r\n            if (gameContract) {\r\n                gameContract.off('AttackComplete', onAttackComplete);\r\n            }\r\n        }\r\n    }, [gameContract]);\r\n\r\n    return (\r\n        <div className=\"arena-container\">\r\n            {/* Add your toast HTML right here */}\r\n            {boss && characterNFT && (\r\n                <div id=\"toast\" className={showToast ? 'show' : ''}>\r\n                    <div id=\"desc\">{`💥 ${boss.name} was hit for ${characterNFT.attackDamage}!`}</div>\r\n                </div>\r\n            )}\r\n\r\n            {/* Boss */}\r\n            {boss && (\r\n                <div className=\"boss-container\">\r\n                    <div className={`boss-content  ${attackState}`}>\r\n                        <h2>🔥 {boss.name} 🔥</h2>\r\n                        <div className=\"image-content\">\r\n                            <img src={boss.imageURI} alt={`Boss ${boss.name}`} />\r\n                            <div className=\"health-bar\">\r\n                                <progress value={boss.hp} max={boss.maxHp} />\r\n                                <p>{`${boss.hp} / ${boss.maxHp} HP`}</p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"attack-container\">\r\n                        <button className=\"cta-button\" onClick={runAttackAction}>\r\n                            {`💥 Attack ${boss.name}`}\r\n                        </button>\r\n                    </div>\r\n                    {attackState === 'attacking' && (\r\n                        <div className=\"loading-indicator\">\r\n                            <LoadingIndicator />\r\n                            <p>Attacking ⚔️</p>\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            )}\r\n\r\n            {/* Character NFT */}\r\n            {characterNFT && (\r\n                <div className=\"players-container\">\r\n                    <div className=\"player-container\">\r\n                        <h2>Your Character</h2>\r\n                        <div className=\"player\">\r\n                            <div className=\"image-content\">\r\n                                <h2>{characterNFT.name}</h2>\r\n                                <img\r\n                                    src={characterNFT.imageURI}\r\n                                    alt={`Character ${characterNFT.name}`}\r\n                                />\r\n                                <div className=\"health-bar\">\r\n                                    <progress value={characterNFT.hp} max={characterNFT.maxHp} />\r\n                                    <p>{`${characterNFT.hp} / ${characterNFT.maxHp} HP`}</p>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"stats\">\r\n                                <h4>{`⚔️ Attack Damage: ${characterNFT.attackDamage}`}</h4>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    {/* <div className=\"active-players\">\r\n                <h2>Active Players</h2>\r\n                <div className=\"players-list\">{renderActivePlayersList()}</div>\r\n              </div> */}\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Arena;","import React, { useEffect, useState } from 'react';\r\nimport './App.css';\r\nimport twitterLogo from './assets/twitter-logo.svg';\r\nimport SelectCharacter from './Components/SelectCharacter';\r\n\r\nimport { CONTRACT_ADDRESS, transformCharacterData } from './constants';\r\nimport myEpicGame from './utils/MyEpicGame.json';\r\nimport { ethers } from 'ethers';\r\nimport Arena from './Components/Arena';\r\nimport LoadingIndicator from './Components/LoadingIndicator';\r\n\r\n// Constants\r\nconst TWITTER_HANDLE = '_buildspace';\r\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\r\n\r\nconst App = () => {\r\n  // State\r\n  const [currentAccount, setCurrentAccount] = useState(null);\r\n  const [characterNFT, setCharacterNFT] = useState(null);\r\n\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  // Actions\r\n  const checkIfWalletIsConnected = async () => {\r\n    try {\r\n      const { ethereum } = window;\r\n\r\n      if (!ethereum) {\r\n        console.log('Make sure you have MetaMask!');\r\n\r\n        setIsLoading(false);\r\n        return;\r\n      } else {\r\n        console.log('We have the ethereum object', ethereum);\r\n\r\n        const accounts = await ethereum.request({ method: 'eth_accounts' });\r\n\r\n        if (accounts.length !== 0) {\r\n          const account = accounts[0];\r\n          console.log('Found an authorized account:', account);\r\n          setCurrentAccount(account);\r\n        } else {\r\n          console.log('No authorized account found');\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  // Render Methods\r\n  const renderContent = () => {\r\n\r\n    if (isLoading) {\r\n      return <LoadingIndicator />;\r\n    }\r\n    /*\r\n     * Scenario #1\r\n     */\r\n    if (!currentAccount) {\r\n      return (\r\n        <div className=\"connect-wallet-container\">\r\n          <img\r\n            src=\"https://64.media.tumblr.com/tumblr_mbia5vdmRd1r1mkubo1_500.gifv\"\r\n            alt=\"Monty Python Gif\"\r\n          />\r\n          <button\r\n            className=\"cta-button connect-wallet-button\"\r\n            onClick={connectWalletAction}\r\n          >\r\n            Connect Wallet To Get Started\r\n          </button>\r\n        </div>\r\n      );\r\n      /*\r\n       * Scenario #2\r\n       */\r\n    } else if (currentAccount && !characterNFT) {\r\n      return <SelectCharacter setCharacterNFT={setCharacterNFT} />;\r\n    } else if (currentAccount && characterNFT) {\r\n      return <Arena characterNFT={characterNFT} />;\r\n    }\r\n  };\r\n\r\n  /*\r\n   * Implement your connectWallet method here\r\n   */\r\n  const connectWalletAction = async () => {\r\n    try {\r\n      const { ethereum } = window;\r\n\r\n      if (!ethereum) {\r\n        alert('Get MetaMask!');\r\n        return;\r\n      }\r\n\r\n      /*\r\n       * Fancy method to request access to account.\r\n       */\r\n      const accounts = await ethereum.request({\r\n        method: 'eth_requestAccounts',\r\n      });\r\n\r\n      /*\r\n       * Boom! This should print out public address once we authorize Metamask.\r\n       */\r\n      console.log('Connected', accounts[0]);\r\n      setCurrentAccount(accounts[0]);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    checkIfWalletIsConnected();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    /*\r\n     * Anytime our component mounts, make sure to immiediately set our loading state\r\n     */\r\n    setIsLoading(true);\r\n    checkIfWalletIsConnected();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    /*\r\n     * The function we will call that interacts with out smart contract\r\n     */\r\n    const fetchNFTMetadata = async () => {\r\n      console.log('Checking for Character NFT on address:', currentAccount);\r\n\r\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n      const signer = provider.getSigner();\r\n      const gameContract = new ethers.Contract(\r\n        CONTRACT_ADDRESS,\r\n        myEpicGame.abi,\r\n        signer\r\n      );\r\n\r\n      const txn = await gameContract.checkIfUserHasNFT();\r\n      if (txn.name) {\r\n        console.log('User has character NFT');\r\n        setCharacterNFT(transformCharacterData(txn));\r\n      } else {\r\n        console.log('No character NFT found');\r\n      }\r\n    };\r\n\r\n    /*\r\n     * We only want to run this, if we have a connected wallet\r\n     */\r\n    if (currentAccount) {\r\n      console.log('CurrentAccount:', currentAccount);\r\n      fetchNFTMetadata();\r\n    }\r\n  }, [currentAccount]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"container\">\r\n        <div className=\"header-container\">\r\n          <p className=\"header gradient-text\">⚔️ Metaverse Slayer ⚔️</p>\r\n          <p className=\"sub-text\">Team up to protect the Metaverse!</p>\r\n          {/* This is where our button and image code used to be!\r\n           *\tRemember we moved it into the render method.\r\n           */}\r\n          {renderContent()}\r\n        </div>\r\n        <div className=\"footer-container\">\r\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\r\n          <a\r\n            className=\"footer-text\"\r\n            href={TWITTER_LINK}\r\n            target=\"_blank\"\r\n            rel=\"noreferrer\"\r\n          >{`built with @${TWITTER_HANDLE}`}</a>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}